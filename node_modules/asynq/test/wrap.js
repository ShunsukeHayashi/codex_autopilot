
var assert = require('assert');

var asynq = require('..');

describe('asynq.wrap(fn*)', function () {

  it('should pass 3 arguments with context', function () {
    var ctx = {
    	      some: 'thing'
    	    };

   return asynq.wrap(function* (a, b, c) {
      assert.deepEqual([1, 2, 3], [a, b, c]);
      assert.equal(ctx, this);
    }).call(ctx, 1, 2, 3);
  })

  it('should pass 2 arguments with context', function () {
    var ctx = {
    	      some: 'thing'
    	    };

    return asynq.wrap(function* (a, b) {
      assert.deepEqual([1, 2], [a, b]);
      assert.equal(ctx, this);
    }).call(ctx, 1, 2);
  })

  it('should pass 1 arguments with context', function () {
    var ctx = {
    	      some: 'thing'
    	    };

    return asynq.wrap(function* (a) {
      assert.deepEqual([1], [a]);
      assert.equal(ctx, this);
    }).call(ctx, 1);
  })

  it('should pass no arguments with context', function () {
    var ctx = {
    	      some: 'thing'
    	    };

    return asynq.wrap(function* () {
      assert.deepEqual([], []);
      assert.equal(ctx, this);
    }).call(ctx);
  })
  
  it('should pass 3 arguments', function () {
    return asynq.wrap(function* (a, b, c) {
      assert.deepEqual([1, 2, 3], [a, b, c]);
    })(1, 2, 3);
  })

  it('should pass 2 arguments', function () {
    return asynq.wrap(function* (a, b) {
      assert.deepEqual([1, 2], [a, b]);
    })(1, 2);
  })

  it('should pass 1 arguments', function () {
    return asynq.wrap(function* (a) {
      assert.deepEqual([1], [a]);
    })(1);
  })

  it('should pass no arguments', function () {
    return asynq.wrap(function* () {
      assert.deepEqual([], []);
    })();
  })
})
